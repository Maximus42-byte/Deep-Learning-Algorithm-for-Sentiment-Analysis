# -*- coding: utf-8 -*-
"""Copy of RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EJIC5g8YtQSzPqaVT483Y9hOgkALWugS
"""

!pip install keras.preprocessing
!pip install keras.models
!pip install numpy
!pip install pandas
!pip install matplotlib

"""# data prepareation/preprocessing"""

import pandas as pd
data = pd.read_csv('/content/drive/My Drive/train_comments.csv')
target = data['verification_status']
text = data['comment']
#import
import re
import numpy as np
from sklearn.model_selection import  train_test_split
import matplotlib.pyplot as plt
from keras.models import Sequential , load_model
from keras.layers import Dense, LSTM, Embedding, Dropout
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences

target.value_counts().sort_index().plot.bar()

target2 = target[0:120000]
text2 = text[0:120000]

target3 = target[120001:]
text3 = text[120001:]

for i in range(120000):
  text2[i] = str(text2[i])

for i in range(120001,180000):
  text3[i] = str(text3[i])

token = Tokenizer(num_words=20000)
token.fit_on_texts(text2.values)

X = token.texts_to_sequences(text2.values)
X = pad_sequences(X)

"""# **creating our model**"""

model = Sequential()
model.add(Embedding(20000, 256,))
model.add(Dropout(0.3))
model.add(LSTM(256,return_sequences=True, dropout=0.3, recurrent_dropout=0.2))
model.add(LSTM(256, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy',optimizer='adam'
,metrics=['accuracy'])
model.summary()

from tensorflow.keras.preprocessing import sequence
#y= pd.get_dummies(target2).values
y = target2
X_train , x_test , Y_train , y_test = train_test_split(X, y, 
                                                       test_size = 0.2 ,
                                                       random_state = 0)
X_train = sequence.pad_sequences(X_train,maxlen = 100)
x_test = sequence.pad_sequences(x_test,maxlen = 100)

"""## **Training Model**"""

batch_size = 32
epochs = 16
model.fit(X_train , Y_train, epochs=epochs ,
          batch_size= batch_size ,verbose=2)

score , acc = model.evaluate(x_test,y_test,batch_size=32,verbose=2)
print("Test score :  ",score)
print("Test accuracy :  " , acc)



















